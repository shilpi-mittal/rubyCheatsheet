$global_var = 1
class Vehicle
  
  attr_accessor :no_of_wheels # cant be initialized here, can be updated by any class
  private # private members till next access modifier
  attr_accessor :type
  @@message = "in class vehicle"  # one instance will be shared by all objects
  $global_var =6 # called only when vehicle class object initialized
  
  public
  attr_reader :readAttr
  attr_writer :writeAttr
  
  
  def get_wheel_count
    "wheels = " + self.no_of_wheels.to_s # ok as not private
  end
  
   def get_type
    "type = " +type  # no self as private
  end
  
  def get_message
    @@message + " of vehicle" +readAttr.to_s # as class variable
    
    # writeAttr.to_s # as write only allowed
  end
  
  def initialize (wheels, type)
    @@message = "in class vehicle"
    self.no_of_wheels = wheels
    self.type = type
    readAttr="hi" #stay nil as only read allowed
    writeAttr="bye"
  end
  
  def set
    $global_var =2
  end
  
  private
  
  def get_text
    "in private method"
  end
  
  def method_missing *m
    m.to_s + " missing in Vehicle"
  end
  
  def private_method
    "private method"
  end
  
  public
  
  def undef_m
    "undef"
  end
  
  def remove_m
    "remove"
  end
  
  def undef_m2
    "undef2"
  end
  
  def play
    undef undef_m
  end
end

module Setter
  def set_vehicle_detail(wheels)
    @detail
    case wheels[-1].to_i   # switch in ruby
    when 4 then  @detail = "four-wheeler"
    when 2 then @detail = "two-wheeler"
    end
  end
end

class Car < Vehicle 
  include Setter
  
  @@str
  
  def initialize 
    super 4, "motor"
    @@message = "in class car"
    @@str='abc'
  end
  
  def get_message
    "hi car " + @@message
  end
  
  def get_str
    @@str.freeze
    @@str
  end

  def set_str input
    p @@str.frozen?
    p @@str = input
  end
  
  def method_missing *m
    m.to_s + " missing in Car"
  end
  
  def undef_m
    "undef in car"
  end
  
  def remove_m
    "remove in car"
  end
  
  def undef_m2
    "undef2 in car"
  end
  
  def play
    undef undef_m # removes only from calling class
    
  end
  remove_method :remove_m #removes in both parent and child(calling) class
    undef_method :undef_m2 #removes only from child
    
    
    
  
end

class Bike < Vehicle 
  include Setter
  
  def initialize 
    super 2, "motor"
    @@message = "in class bike"
  end
  
  def get_message
    "hi bike" + @@message
  end
  
  def method_missing m
    m + "missing in Bike"
  end
  
end

p "A=Vehicle.new(3,kl)"
A = Vehicle.new(3,"kl")
p A.instance_of? Vehicle # => true
p A.get_message #=> "in class vehicle of vehicle"
p A.get_wheel_count #=> "wheels = 3"
p $global_var #=> 6
A.set
p $global_var #=> 2
# p A.get_text #error as private method
p A.send :get_text #=> "in private method"

p A.to_s #=> "#<Vehicle:0x0055ef4def09d8>"

p "B = Car.new"
B = Car.new
p B.instance_of? Vehicle #=> false
p B.instance_of? Car #=> true
p B.get_message #=> "hi car in class car"
p B.get_wheel_count #=> "wheels = 4"
p B.get_type #=> "type = motor"
p $global_var #=> 2
p B.set_vehicle_detail B.get_wheel_count #=> 4
#=>"four-wheeler"
p B.send :get_text #=> "in private method"

p A.to_s #=> "#<Vehicle:0x0055ef4def09d8>"
p B.to_s #=> "#<Car:0x0055ef4def0230>"

p "C = Bike.new"
C = Bike.new
p C.get_message #=> "hi bikein class bike"
p C.get_wheel_count #=> 
p C.get_type #=> "wheels = 2"
p $global_var #=> "type = motor"
p C.set_vehicle_detail C.get_wheel_count #=> 2
#=> "two-wheeler"

p A.to_s
p B.to_s
p C.to_s #=> "#<Bike:0x0055ef4deef7e0>"

p A.get_message #=> "in class bike of vehicle"
p B.get_message #=> "hi car in class bike"
p C.get_message #=> "hi bikein class bike"


p A.eql? B #=> false
p A==B #=> false

p "C=A"
C=A
p C.instance_of? Vehicle #=> true
p C.instance_of? Bike #=> false
p C.get_message #=> "in class bike of vehicle"
p C.get_wheel_count #=> "wheels = 3"
p C.get_type #=> "type = kl"
p $global_var #=> 2
# p C.set_vehicle_detail C.get_wheel_count  should give error

p A.to_s #=> "#<Vehicle:0x0055ef4def09d8>"
p B.to_s #=> "#<Car:0x0055ef4def0230>"
p C.to_s #=> "#<Vehicle:0x0055ef4def09d8>"

p "A=B"
A=B
p A.get_message #=> "hi car in class bike"
p A.get_wheel_count #=> "wheels = 4"
p A.get_type #=> "type = motor"
p $global_var #=> 2
p A.set_vehicle_detail A.get_wheel_count #=> "four-wheeler"
p A.eql? B #=> true
p A==B #=> true
p A===B #=> true

p A.to_s #=> "#<Car:0x0055ef4def0230>"
p B.to_s #=> "#<Car:0x0055ef4def0230>"
p C.to_s #=> "#<Vehicle:0x0055ef4def09d8>"


p A.instance_of? Vehicle #=> false
p A.instance_of? Car #=> true

# p Car.initialize #as works with private members
p Car.allocate.get_wheel_count #initialize is not invoked hence no_of_wheels is nil #=> "wheels = "

String str = "foo"
p str << "bar" #=> "foobar"
p str.freeze #=> "foobar"
# p str << "buzz" # runtime error as cant be modified
p str.frozen? #=> true

p B.hi_missing
p C.hi_missing

p C.private_method #missing as private

p B.undef_m
p B.undef_m2
p B.remove_m

p C.undef_m
p C.undef_m2
p C.remove_m

B.play 

p B.undef_m
p B.undef_m2
p B.remove_m

p C.undef_m
p C.undef_m2
p C.remove_m

C.play 

p B.undef_m
p B.undef_m2
p B.remove_m

p C.undef_m
p C.undef_m2
p C.remove_m


module Greeter
   def hi
      "hello"
   end
end                     # A silly module
s = "string object"
s.extend(Greeter)       # Add hi as a singleton method to s
p s.hi                    # => "hello"
String.extend(Greeter)  # Add hi as a class method of String
p String.hi               # => "hello"




p D = B.clone
p E = B.dup

p B.is_a? Setter
p C.is_a? Setter


p define_method(:method_name) {p "inside method" }
method_name

def get_binding(str)
  return binding
end
str = "hello"
p eval "str + ' Fred'"                      #=> "hello Fred"
p eval "str + ' Fred'", get_binding("bye")  #=> "bye Fred"

p $SAFE
p $LOAD_PATH

String str2 = "yu"
p str2.tainted?
str2.taint
p str2.tainted?
String str3 = str2
p str3.tainted?

p D.inspect
p D.to_s
p D
#puts D #error

puts "p"
print "p"
puts "p"


module Foo
  def foo
    puts 'heyyyyoooo!'
  end
end

class Bar
  include Foo
end

Bar.new.foo # heyyyyoooo!
Bar.foo # NoMethodError: undefined method ‘foo’ for Bar:Class

class Baz
  extend Foo
end

Baz.foo # heyyyyoooo!
Baz.new.foo # NoMethodError: undefined method ‘foo’ for #<Baz:0x1e708>
